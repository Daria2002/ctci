#include <iostream>

/**
 * Random Crashes: You are given the source to an application which crashes when it is run. After
 * running it ten times in a debugger, you find it never crashes in the same place. The application is
 * single threaded, and uses only the C standard library. What programming errors could be causing
 * this crash? How would you test each one? 
 */
int main() {
    std::cout << "General causes for random crashes (never crashes in the same place):\n"
                 "1. Random Variable - some random number or variable component that may not\n"
                 "                     be fixed for every exection of the program. i.e. user\n"
                 "                     input, a random number generated by the program, or the\n"
                 "                     time of day.\n"
                 "2. Uninitialized Variable - uninitialized value in some languages may cause it\n"
                 "                            to take on an arbitrary value. The values could result\n"
                 "                            in the code taking slightly different path each time.\n"
                 "3. Memory Leak - The program may have run out of memory, have heap overflow or\n"
                 "                 corruption of data on the stack. This culprits are totally random\n"
                 "                 for each run since they depends on the number of processes running\n"
                 "                 at that particular time.\n"
                 "4. External Dependencies - The program may depend on another application, machine or\n"
                 "                           resource. If there are multiple dependencies, the program\n"
                 "                           could crash at any point.\n";
}
